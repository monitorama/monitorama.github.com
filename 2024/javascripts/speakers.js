var rawSpeakers = {
  pdx: [
    {
      name: "Virginia Diana Todea",
      pronouns: "She/Her",
      github: "",
      gitlab: "",
      twitter: "",
      bio: "Diana is a Site Reliability Engineer with a focus on Observability at Elastic. She is passionate about machine learning, DevOps and GenAI. She supports women in tech.",
      title: "Serverless Observability: a case study of SLOs",
      abstract:
        "<p>Fine tuning the Service Level Objectives is a golden rule for the industries adopting them. This talk explores the case study of migrating to Kubernetes and how SLOs and transforms can backfire if not managed correctly.</p><p>The talk starts by presenting the reasons why SLOs are important in the software development framework. We will then present our case study on how migrating to Kubernetes exposed our system to SLO definition and the challenges our system faced when trying to measure and adhere to our SLOs. We will deep dive in the main bottlenecks we encountered when trying to apply our SLOs across our multi cluster infrastructure, how we dealt with these challenges by correlating our SLOs with burn rates and transforms. We highlight that the observability system can backfire as a consequence if the metrics are not properly adjusted.</p><p>We wrap up our talk by drawing the main lessons from our case study and the benefits to the ecosystem: SLOs are paramount for the software development lifecycle and implementing them correctly should follow a process of continuous improvement alongside with adopting the right tools and metrics.</p>",
      video: "",
      slides: "",
      gravpath: "userimage/6018319/72454107666dfeddae0dc146ee758ded",
      gravhash: "",
    },
    {
      name: "Dan Slimmon",
      pronouns: "He/Him",
      github: "",
      gitlab: "",
      twitter: "",
      bio: "An DevOp and SRE for 16 years, Dan has led observability and incident response programs for rapidly scaling companies like HashiCorp and Etsy. He's a tireless advocate for applying scientific inquiry and medical diagnostic techniques to the field of software operations.",
      title: "No observability without theory",
      abstract:
        "<p>When our system isn't observable enough, what do we do? We add telemetry. The more signals we can observe, the more knowledge we'll have. Or so the thinking goes. But observability requires more than just data: it requires a _theory_ about how our system works. Only within a theory can signals be interpreted and made useful.</p><p>In this talk we'll see that, often, the limiting factor of a system's observability is not the thoroughness of our measurements, but rather the strength and coherence of our theory. This fact carries major implications for how we must build dashboards, write alerts, and respond to incidents.</p>",
      video: "",
      slides: "",
      gravpath: "",
      gravhash:
        "9e1aedd800c4580300eef746b1c7db9829b95ed4500fd086cbb79b757cfce136",
    },
    {
      name: "Dave McAllister",
      pronouns: "He/Him",
      github: "",
      gitlab: "",
      twitter: "",
      bio: "Currently providing technical OSS insights for NGINX, Dave talks about the advantages of microservices and orchestration to solve distributed systems challenges, especially with open source. Dave has been a champion for open systems and open source from the early days of Linux to today's world of clouds and containers. He often speaks on topics associated with emerging software architectures and practices, observability, and how open source innovations power today's world.",
      title: "",
      abstract:
        "<p>&quot;Lies, damned lies and statistics.&quot; While true, only statistics allows you to lie to yourself.</p><p>Let's explore how statistics can sometimes trick us into believing something that's not true. This isn't always done on purpose; often, we mislead ourselves without realizing it. We'll look at how focusing too much on recent events, choosing specific data to look at, and making assumptions about the size of a group can lead us to the wrong conclusions. We'll dissect common practices like the misuse of graphical representations, the confusion between correlation and causation, and the manipulation of scale and averages. These practices, often overlooked or misunderstood, can result in false indicators, misleading correlations, and distracting information. Through real-world examples, we demonstrate how these statistical pitfalls can shape narratives, influence decisions, and impact public opinion. This presentation aims to teach you how to look at statistics more critically, understand their limits, and avoid fooling yourself with numbers.</p>",
      video: "",
      slides: "",
      gravpath: "",
      gravhash: "fe11a540d3f4e92bd55503223fe46e17",
    },
    {
      name: "Austin Parker",
      pronouns: "He/They",
      github: "",
      gitlab: "",
      twitter: "",
      bio: "Austin Parker is Director of Open Source at Honeycomb.io, a co-founder of the OpenTelemetry project, and a member of the OpenTelemetry Governance Committee. With over two decades in the IT and software industry, Austin has built and operated cloud-native platforms for a variety of functions, including banking, healthcare, and telecommunications. In addition, Austin is a frequent writer, international speaker, and community builder around open source and observability topics. He’s an author of Learning OpenTelemetry (O'Reilly, 2024) and Distributed Tracing in Practice (O’Reilly, 2022), a co-chair and organizer of Observability Day NA and EMEA, and the founder of the world’s first (and only) virtual DevOps event in Animal Crossing, Deserted Island DevOps.",
      title: "",
      abstract:
        "<p>&quot;If I have to watch one more talk that references xkcd 927, I'll drop our logging db myself.&quot;</p><p>&quot;The only thing I need to trace is my path out of this building at five o'clock each day.&quot;</p><p>Hacker News comments or your personal thoughts on everyone's favorite observability project, OpenTelemetry? The answer may surprise you! In this talk, levity will be enforced and the takes will be piping hot, as you learn about the many ways that OpenTelemetry has been completely abused by the commercial 'observability community', why it didn't have to be this way, and how in spite of the best efforts of many millions of dollars in marketing pablum it's still a pretty good project.</p>",
      video: "",
      slides: "",
      gravpath: "userimage/6018319/c8fa467358081e6fc32d43e7fe92c2fc",
      gravhash: "",
    },
    {
      name: "Alex Hidalgo",
      pronouns: "He/Him",
      github: "",
      gitlab: "",
      twitter: "",
      bio: "Alex Hidalgo is the Principal Reliability Advocate at Nobl9 and author of &quot;Implementing Service Level Objectives.&quot; During his career he has developed a deep love for sustainable operations, proper observability, and using SLO data to drive discussions and make decisions. Alex's previous jobs have included IT support, network security, restaurant work, t-shirt design, and hosting game shows at bars. When not sharing his passion for technology with others, you can find him scuba diving or watching Premier League football. He lives in Brooklyn with his partner Jen and a rescue dog named Taco. Alex has a BA in philosophy from Virginia Commonwealth University.",
      title: "Logs Are Good, Actually",
      abstract:
        "<p>The monitoring and observability space has moved at an extremely rapid pace over the last few years. Part of this is due to legitimate technological improvements in terms of standards, tooling, and advanced vendor solutions. But a large part of why it feels like the space is moving at such a frenetic pace if due to marketing departments and talking heads just like me. While it might feel like there is intense pressure to adopt all of the newest and most advanced concepts that fall into the category of &quot;monitoring&quot; or &quot;observability&quot;. I'd like to make an argument for the continued importance of our oldest, and perhaps most important, source of telemetry: the humble log line.</p>",
      video: "",
      slides: "",
      gravpath: "",
      gravhash: "5eaeee295206dd5e5005a5c90603b1d4",
    },
    {
      name: "Colin Douch",
      pronouns: "He/Him",
      github: "",
      gitlab: "",
      twitter: "",
      bio: "Colin currently Tech Leads the Observability Platform Team at Cloudflare, orchestrating and inventing solutions to better serve Cloudflare's increasingly large global footprint of services around the world. Starting in Mining, he has been working, advising, and researching in the Monitoring and Observability space for close to 10 years and has gained a wide perspective into the difficulties that modern companies, big and small, deal with in properly introspecting their systems, both physical and computerised. Originally from New Zealand, he now lives in Melbourne, Australia where he frequently runs talks on Observability developments, introducing new graduates to the world of Observability, and usually teaching some of the old timers something new too.",
      title: "Experiments in Backing Prometheus with Clickhouse",
      abstract:
        "<p>Columnar datastores like Clickhouse are becoming increasingly popular when it comes to bulk storage of Observability data. This is due to their efficient enabling of high cardinality and high dimensionality datasets that appear natively in Observability workloads. At the same time, one of the chief complaints about Prometheus is its seeming inability to handle these workloads, with common advice being to reduce labelsets as much as possible to reduce the load on Prometheus. With the invention of Prometheus Remote Write and Read however, we are empowered to experiment with alternative backing stores for Prometheus. In this talk, I will introduce a methodology for offloading Prometheus storage and retrieval to Clickhouse. Using that method, I will cover the ups and downs of using Clickhouse as an external Prometheus storage, including storage usage, query efficiency, and operational overhead, and opine on how parts of Clickhouses design might help inform Prometheus improvements in the future</p>",
      video: "",
      slides: "",
      gravpath: "userimage/6018319/0a756bbdd021e322e373dbe900d91d3f",
      gravhash: "",
    },
    {
      name: "Sudeep Kumar",
      pronouns: "He/Him",
      github: "",
      gitlab: "",
      twitter: "",
      bio: "Sudeep, a Principal Engineer at Salesforce, brings over 18 years of expertise in creating scalable and robust distributed systems that handle petabytes of unstructured data daily. He has led the architecture and design of various cloud-native SaaS solutions. His diverse industry exposure encompasses E-commerce, Embedded systems, and Telecom sector. He has taken the stage at several international conferences in different countries. He is the primary author of multiple technical publications featured in IEEE and other well-known forums. He also holds various patents in the realms of payments, e-commerce, and distributed systems. Sudeep's technical forte lies in addressing Big data challenges, Monitoring/Telemetry, developing cloud-native platforms and frameworks, client-side programming, and creating scalable server-side backends. When Sudeep isn't glued to his computer,  you can find him playing referee to his two lively kids.",
      title: "Tracing Service Dependencies at Salesforce",
      abstract:
        "<p>This talk will focus on our strategic choice to utilize a streaming pipeline for inferring service dependencies using Trace telemetry data. We'll also delve into a key use case that showcases how service dependencies are visualized and managed through the streaming pipeline on our distributed tracing platform. These service dependency views are crucial for monitoring the deployment status of services and the health of related services. Moreover, by providing a clear overview of service interactions, we also facilitate risk assessment for new feature rollouts, enhancing both product development and operational stability. Additionally, discuss the role of integrating service mesh onto Kubernetes led to comprehensive coverage and completeness of our service dependency data.</p><p>Also In our talk, we'll will explore how a Flink based streaming platform and Druid backend is utilized to gather all trace telemetry data, enabling us to process 100% of trace data (from 300 millions spans collected per minute) and deduce complete trace contexts. By establishing unique trace contexts, we create a trace state that represents every request occurring within the system. This state (Dependency edges) contains vital information required to map out the path of transactions as they move through different services and components within Salesforce.</p><p>Our proposed talk will delve into the transformative process of converting individual trace states into service dependency edge records through Flink and Druid, revealing the complex web of interactions between services. Attendees will be equipped with methods to uncover key interactions, such as identifying the services or operations that most frequently initiate contact with other services. Furthermore, we will explore strategies for utilizing service dependency topology to achieve a thorough grasp of the relationships and dependencies among services and components in a distributed system.</p><p>Adding to the benefits, the audience will learn how having service mesh coverage on any Kubernetes infrastructure can be leveraged effectively for accurately deducing service dependencies. This aspect underscores the importance of infrastructure design in enhancing traceability and reliability within distributed systems.</p><p>Armed with this understanding, participants will be better positioned to enhance system performance and reliability. The session aims to provide attendees with actionable insights and methodologies for effectively managing and navigating the intricate service dependencies that characterize modern distributed systems.</p>",
      video: "",
      slides: "",
      gravpath: "userimage/6018319/7f4395c9cdc2a851288fdefb417d2822",
      gravhash: "",
    },
    {
      name: "Matt Macdonald-Wallace",
      pronouns: "He/Him",
      github: "",
      gitlab: "",
      twitter: "",
      bio: "Matt lives in Wales, UK with his family and dog.  Unashamedly geeky, he can be found tinkering with his home automation setup, using Grafana to monitor the temperature of his BBQ, and running the local hackspace. Currently working as a Senior Solutions Architect for Grafana, Matt fills his days helping customers understand what it means to observe their applications, infrastructure, and business metrics and convert the raw data into useful information.",
      title: "Welcome to the OTEL California",
      abstract:
        "<p>What kinds of surprises await you when implementing Open Telemetry, and will OTEL help you hold a mirror to your code?</p><p>In this 30 minute talk, Matt Wallace will take you through his journey so far, including the pitfalls and prizes he's found along the way.</p><p>Focusing on Python, and without any apologies for the title of the talk, Matt will answer such questions as:<ul><li>Can I use OTEL to avoid vendor lock-in? (Yes!)</li></ul><ul><li>Should I be using OTEL? (Also yes!)</li></ul><ul><li>Is auto-instrumentation enough? (Maybe?)</li></ul><ul><li>Should I get disheartened if my application service maps don't show the right connections straight away? (No!)</li></ul></p><p>If you're new to OTEL or trying to work out how you escape vendor lock-in with application observability for the future, this session will guide you through everything you need to know to make the most from this free, open, and rapidly developing framework.</p>",
      video: "",
      slides: "",
      gravpath: "",
      gravhash:
        "8d012db1484fc625aa81a556e072ab99c695eafa536ee26fb6eb9b20e3cbe728",
    },
    {
      name: "Johannes Tax",
      pronouns: "He/Him",
      github: "",
      gitlab: "",
      twitter: "",
      bio: "I’m a Principal Software Engineer at Grafana Labs, I help Grafana users be successful with OpenTelemetry instrumentation. I'm an approver for OpenTelemetry semantic conventions, and I lead a group dedicated to improving and stabilizing OpenTelemetry messaging semantic conventions.",
      title:
        "Disintegrated telemetry: The pains of monitoring asynchronous workflows",
      abstract:
        "<p>Many tools and best practices around instrumentation and observability are tailored to synchronous request/response workflows, HTTP and RESTful APIs being the most prominent examples. However, if you have to instrument and monitor a system that relies on asynchronous communication based on events or messages, you'll soon find out that established concepts and practices don't work so well. Observing loosely coupled processing steps often leads to disintegrated telemetry, which makes it hard to derive actionable insights.</p><p>In this talk, I focus on the challenge of correlating the disintegrated telemetry pieces (metrics and traces) that are emitted during the lifetime of a message or an event. I describe the problem and present possible solution approaches. I show how each solution approach is broken in its own way, and provide insights that help you to choose the least broken solution for your scenario.</p><p>Finally, to show some light at the end of the tunnel, I give an overview of standardization efforts in this space, including W3C context propagation drafts for messaging protocols, and the messaging semantic conventions created by the OpenTelemetry messaging workgroup, which I'm leading.</p>",
      video: "",
      slides: "",
      gravpath: "userimage/6018319/35ea2ed0467cf5a93cbd9560b852b496",
      gravhash: "",
    },
    {
      name: "David Caudill",
      pronouns: "He/Him",
      github: "",
      gitlab: "",
      twitter: "",
      bio: "David is an SRE and recovering engineering manager. He has wide ranging experience in distributed datastores, healthcare, adtech, biotech, education, ophthalmology, logistics, and most recently, fintech. In his spare time he makes strange sounds with synthesizers and is an avid collector of folk and ethnic art.",
      title: "The Ticking Timebomb of Observability Expectations",
      abstract:
        "<p>It’s very easy to convince Engineers and Managers to “monitor everything” — who doesn’t want as much information as they can possibly have about what’s happening in their system? At surface level, this sounds like a great plan. This has become the dominant approach by engineering teams: simply install an agent, sidecar, or SDK, and everything 🌈 will be monitored for you. Want to know how your Kubernetes cluster is doing? Here’s 10k “turnkey” metrics! The numbers become gigantic as architectures continue to fragment from monoliths to rocks(SOA) to pebbles (microservices) to…a gaseous cloud of lambdas? Doesn’t matter, add this line and ship dozens of metrics from every single lambda execution. Ship it all, monitor everything, and sort it out later. After all, we can’t possibly know what the cause of an incident in the future might be! Every second of outage costs us money! For every single interaction we capture scientific levels of data, constantly vigilant, expecting at any moment we might need to comb through it to understand a complex outage.</p><p>The trouble is, this is extraordinarily expensive computationally, cognitively, and financially. The financial and computational cost of this has been subsidized by VC investment in the past, which were in turn subsidized by the historically low interest rates of the 2010s. As you’ve probably noticed, that party is over. The cognitive costs are still subsidized by simply putting on the confident “Serious Senior Engineer” face and pretending we know what all this stuff means.</p><p>In this talk, we'll cover a little bit of how we got here, the cognitive biases that keep us here, and some specific guidance on better ways to approach these problems in a cost effective way.</p>",
      video: "",
      slides: "",
      gravpath: "userimage/6018319/d23323bbc08577de12e2c73531799fa3",
      gravhash: "",
    },
    {
      name: "Thai Wood",
      pronouns: "He/Him",
      github: "",
      gitlab: "",
      twitter: "",
      bio: "Thai helps teams build better systems and improve their ability to effectively respond to incidents. A former EMT, he applies his experience managing emergency situations to the software industry. He writes about resilience engineering at ResilienceRoundup.com",
      title:
        "The complexity of success and failure: the story of the Gimli Glider",
      abstract:
        "<p>A look at monitoring, attention, incidents, and complexity through the lens of the story of the Gimli Glider, a plane that ran out of fuel mid-flight, but was able to be landed successfully on the ground anyways.</p><p>I'll cover things like:</p><p><ul><li>How dashboards and gauges can mislead, especially depending on the context around their usage and viewing</li><li>How expertise contributes to interpretation of monitoring and responding to incidents.</li><li>The negotiable, changing definitions of failure in an incident, that also mean some traditional forms of monitoring are insufficient.</li><li>How we, as an industry, can help make sure we have the right monitoring and resources in place to make a safe landing even when things go wrong.</li></ul></p>",
      video: "",
      slides: "",
      gravpath: "",
      gravhash:
        "54b637e8d400d13072096279b181e869873a5519f7b6fc8df53eae4241442739",
    },
    {
      name: "Pete Fritchman",
      pronouns: "He/Him",
      github: "",
      gitlab: "",
      twitter: "",
      bio: "SRE/Infrastructure engineer with a passion for all things Observability.",
      title:
        "The shoemaker’s children have no shoes - why SRE teams must help themselves",
      abstract:
        "<p>There’s an old proverb that says ‘the shoemaker’s children have no shoes.’ In other words, people with specific skills or who offer in-demand services are often so busy providing their expertise and service to others that they aren’t able or don’t have the time to provide it to themselves.</p><p>The same could be said of SRE teams and internal services, and has never been more true for developer tooling and workflows. SREs are laser-focused on ensuring a great experience for customer facing applications but their own internal services, and their internal users, can sometimes go neglected.</p><p>It’s time for the shoemaker to give their children shoes! In this 30-minute talk, Pete Fritchman, staff infrastructure engineer at Observe, will offer guiding principles and practical examples to get SRE team members thinking about how they handle internal services and customers. Fritchman will also explore how organizations are putting themselves at risk as well as outline best practices that must be taken to adequately support internal services.</p>",
      video: "",
      slides: "",
      gravpath: "",
      gravhash:
        "749ba41e22a3f78f8fd057e1fe211745c5d4ab304daf88520b5b6115336be7cf",
    },
    /* {
      "name": "",
      "pronouns": "",
      "github": "",
      "gitlab": "",
      "twitter": "",
      "bio": "",
      "title": "",
      "abstract": "<p></p>",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "",
    },
    {
      "name": "",
      "pronouns": "",
      "github": "",
      "gitlab": "",
      "twitter": "",
      "bio": "",
      "title": "",
      "abstract": "<p></p>",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "",
    },
    {
      "name": "",
      "pronouns": "",
      "github": "",
      "gitlab": "",
      "twitter": "",
      "bio": "",
      "title": "",
      "abstract": "<p></p>",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "",
    },
    {
      "name": "",
      "pronouns": "",
      "github": "",
      "gitlab": "",
      "twitter": "",
      "bio": "",
      "title": "",
      "abstract": "<p></p>",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "",
    },
    {
      "name": "",
      "pronouns": "",
      "github": "",
      "gitlab": "",
      "twitter": "",
      "bio": "",
      "title": "",
      "abstract": "<p></p>",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "",
    },
    {
      "name": "",
      "pronouns": "",
      "github": "",
      "gitlab": "",
      "twitter": "",
      "bio": "",
      "title": "",
      "abstract": "<p></p>",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "",
    },
    {
      "name": "",
      "pronouns": "",
      "github": "",
      "gitlab": "",
      "twitter": "",
      "bio": "",
      "title": "",
      "abstract": "<p></p>",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "",
    },
    {
      "name": "",
      "pronouns": "",
      "github": "",
      "gitlab": "",
      "twitter": "",
      "bio": "",
      "title": "",
      "abstract": "<p></p>",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "",
    },
    {
      "name": "",
      "pronouns": "",
      "github": "",
      "gitlab": "",
      "twitter": "",
      "bio": "",
      "title": "",
      "abstract": "<p></p>",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "",
    },
    {
      "name": "",
      "pronouns": "",
      "github": "",
      "gitlab": "",
      "twitter": "",
      "bio": "",
      "title": "",
      "abstract": "<p></p>",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "",
    },
    {
      "name": "",
      "pronouns": "",
      "github": "",
      "gitlab": "",
      "twitter": "",
      "bio": "",
      "title": "",
      "abstract": "<p></p>",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "",
    },
    {
      "name": "",
      "pronouns": "",
      "github": "",
      "gitlab": "",
      "twitter": "",
      "bio": "",
      "title": "",
      "abstract": "<p></p>",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "",
    } */
  ],
  baltimore: [
    /* {
      "name": "Riley Berton",
      "pronouns": "",
      "github": "rileyberton",
      "gitlab": "",
      "twitter": "rileyberton",
      "bio": "Riley is a Principal SRE at Major League Baseball with over 20 years experience in building complex systems. He has worked on time series databases @circonus, real time streaming data @AppNexus, audio and video recognition systems @viggle, and audio/video call logging systems @eventide before finding a home at baseball. In his spare time you can find him on the baseball field playing or at the baseball field watching.",
      "title": "What’s Your Service’s Batting Average?",
      "abstract": "",
      "video": "",
      "slides": "",
      gravpath: "",
      "gravhash": "64ea38019d0ab54249b9c1d7fa429db1",
    }, */
  ],
};
